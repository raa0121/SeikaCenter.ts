// tslint:disable
/**
 * SeikaCenter HTTP API
 * SeikaCenter HTTP API
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Avator
 */
export interface Avator {
    /**
     * 
     * @type {number}
     * @memberof Avator
     */
    cid: number;
    /**
     * 
     * @type {string}
     * @memberof Avator
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {{ [key: string]: Param; }}
     * @memberof InlineResponse200
     */
    effect?: { [key: string]: Param; };
    /**
     * 
     * @type {{ [key: string]: Param; }}
     * @memberof InlineResponse200
     */
    emotion?: { [key: string]: Param; };
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    message: string;
}
/**
 * 
 * @export
 * @interface Param
 */
export interface Param {
    /**
     * 
     * @type {number}
     * @memberof Param
     */
    value: number;
    /**
     * 
     * @type {number}
     * @memberof Param
     */
    min: number;
    /**
     * 
     * @type {number}
     * @memberof Param
     */
    max: number;
    /**
     * 
     * @type {number}
     * @memberof Param
     */
    step: number;
}
/**
 * 
 * @export
 * @interface ParamStruct
 */
export interface ParamStruct {
    /**
     * 
     * @type {string}
     * @memberof ParamStruct
     */
    talktext: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ParamStruct
     */
    effects?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ParamStruct
     */
    emotions?: { [key: string]: number; };
}

/**
 * AvatorApi - axios parameter creator
 * @export
 */
export const AvatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return list of available avators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2(options: any = {}): RequestArgs {
            const localVarPath = `/AVATOR2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2ByCid(cid: number, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getAvator2ByCid.');
            }
            const localVarPath = `/AVATOR2/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return current parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2CurrentByCid(cid: number, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getAvator2CurrentByCid.');
            }
            const localVarPath = `/AVATOR2/{cid}/current`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatorApi - functional programming interface
 * @export
 */
export const AvatorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return list of available avators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Avator>> {
            const localVarAxiosArgs = AvatorApiAxiosParamCreator(configuration).getAvator2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2ByCid(cid: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AvatorApiAxiosParamCreator(configuration).getAvator2ByCid(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return current parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2CurrentByCid(cid: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AvatorApiAxiosParamCreator(configuration).getAvator2CurrentByCid(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AvatorApi - factory interface
 * @export
 */
export const AvatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Return list of available avators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2(options?: any): AxiosPromise<Array<Avator>> {
            return AvatorApiFp(configuration).getAvator2(options)(axios, basePath);
        },
        /**
         * Return parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2ByCid(cid: number, options?: any): AxiosPromise<InlineResponse200> {
            return AvatorApiFp(configuration).getAvator2ByCid(cid, options)(axios, basePath);
        },
        /**
         * Return current parameter list of avatar indicated by cid
         * @param {number} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvator2CurrentByCid(cid: number, options?: any): AxiosPromise<InlineResponse200> {
            return AvatorApiFp(configuration).getAvator2CurrentByCid(cid, options)(axios, basePath);
        },
    };
};

/**
 * AvatorApi - object-oriented interface
 * @export
 * @class AvatorApi
 * @extends {BaseAPI}
 */
export class AvatorApi extends BaseAPI {
    /**
     * Return list of available avators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatorApi
     */
    public getAvator2(options?: any) {
        return AvatorApiFp(this.configuration).getAvator2(options)(this.axios, this.basePath);
    }

    /**
     * Return parameter list of avatar indicated by cid
     * @param {number} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatorApi
     */
    public getAvator2ByCid(cid: number, options?: any) {
        return AvatorApiFp(this.configuration).getAvator2ByCid(cid, options)(this.axios, this.basePath);
    }

    /**
     * Return current parameter list of avatar indicated by cid
     * @param {number} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatorApi
     */
    public getAvator2CurrentByCid(cid: number, options?: any) {
        return AvatorApiFp(this.configuration).getAvator2CurrentByCid(cid, options)(this.axios, this.basePath);
    }

}


/**
 * ControlApi - axios parameter creator
 * @export
 */
export const ControlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Execute voice synthesis for the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlay2ByCid(cid: number, paramStruct?: ParamStruct, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postPlay2ByCid.');
            }
            const localVarPath = `/PLAY2/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'applcation/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof paramStruct !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paramStruct !== undefined ? paramStruct : {}) : (paramStruct || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCid(cid: number, paramStruct?: ParamStruct, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postSave2ByCid.');
            }
            const localVarPath = `/SAVE2/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'applcation/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof paramStruct !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paramStruct !== undefined ? paramStruct : {}) : (paramStruct || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {number} sampleRate 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCidAndSampleRate(cid: number, sampleRate: number, paramStruct?: ParamStruct, options: any = {}): RequestArgs {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postSave2ByCidAndSampleRate.');
            }
            // verify required parameter 'sampleRate' is not null or undefined
            if (sampleRate === null || sampleRate === undefined) {
                throw new RequiredError('sampleRate','Required parameter sampleRate was null or undefined when calling postSave2ByCidAndSampleRate.');
            }
            const localVarPath = `/SAVE2/{cid}/{sampleRate}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"sampleRate"}}`, encodeURIComponent(String(sampleRate)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'applcation/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof paramStruct !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(paramStruct !== undefined ? paramStruct : {}) : (paramStruct || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControlApi - functional programming interface
 * @export
 */
export const ControlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Execute voice synthesis for the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlay2ByCid(cid: number, paramStruct?: ParamStruct, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = ControlApiAxiosParamCreator(configuration).postPlay2ByCid(cid, paramStruct, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCid(cid: number, paramStruct?: ParamStruct, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = ControlApiAxiosParamCreator(configuration).postSave2ByCid(cid, paramStruct, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {number} sampleRate 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCidAndSampleRate(cid: number, sampleRate: number, paramStruct?: ParamStruct, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = ControlApiAxiosParamCreator(configuration).postSave2ByCidAndSampleRate(cid, sampleRate, paramStruct, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ControlApi - factory interface
 * @export
 */
export const ControlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Execute voice synthesis for the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlay2ByCid(cid: number, paramStruct?: ParamStruct, options?: any): AxiosPromise<InlineResponse2001> {
            return ControlApiFp(configuration).postPlay2ByCid(cid, paramStruct, options)(axios, basePath);
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCid(cid: number, paramStruct?: ParamStruct, options?: any): AxiosPromise<any> {
            return ControlApiFp(configuration).postSave2ByCid(cid, paramStruct, options)(axios, basePath);
        },
        /**
         * Receive audio data from the avatar specified by cid
         * @param {number} cid 
         * @param {number} sampleRate 
         * @param {ParamStruct} [paramStruct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSave2ByCidAndSampleRate(cid: number, sampleRate: number, paramStruct?: ParamStruct, options?: any): AxiosPromise<any> {
            return ControlApiFp(configuration).postSave2ByCidAndSampleRate(cid, sampleRate, paramStruct, options)(axios, basePath);
        },
    };
};

/**
 * ControlApi - object-oriented interface
 * @export
 * @class ControlApi
 * @extends {BaseAPI}
 */
export class ControlApi extends BaseAPI {
    /**
     * Execute voice synthesis for the avatar specified by cid
     * @param {number} cid 
     * @param {ParamStruct} [paramStruct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlApi
     */
    public postPlay2ByCid(cid: number, paramStruct?: ParamStruct, options?: any) {
        return ControlApiFp(this.configuration).postPlay2ByCid(cid, paramStruct, options)(this.axios, this.basePath);
    }

    /**
     * Receive audio data from the avatar specified by cid
     * @param {number} cid 
     * @param {ParamStruct} [paramStruct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlApi
     */
    public postSave2ByCid(cid: number, paramStruct?: ParamStruct, options?: any) {
        return ControlApiFp(this.configuration).postSave2ByCid(cid, paramStruct, options)(this.axios, this.basePath);
    }

    /**
     * Receive audio data from the avatar specified by cid
     * @param {number} cid 
     * @param {number} sampleRate 
     * @param {ParamStruct} [paramStruct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlApi
     */
    public postSave2ByCidAndSampleRate(cid: number, sampleRate: number, paramStruct?: ParamStruct, options?: any) {
        return ControlApiFp(this.configuration).postSave2ByCidAndSampleRate(cid, sampleRate, paramStruct, options)(this.axios, this.basePath);
    }

}


/**
 * StaticHostingApi - axios parameter creator
 * @export
 */
export const StaticHostingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns static content in the app folder directly under the work folder
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppByPath(path: string, options: any = {}): RequestArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getAppByPath.');
            }
            const localVarPath = `/app/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaticHostingApi - functional programming interface
 * @export
 */
export const StaticHostingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns static content in the app folder directly under the work folder
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppByPath(path: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = StaticHostingApiAxiosParamCreator(configuration).getAppByPath(path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StaticHostingApi - factory interface
 * @export
 */
export const StaticHostingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns static content in the app folder directly under the work folder
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppByPath(path: string, options?: any): AxiosPromise<void> {
            return StaticHostingApiFp(configuration).getAppByPath(path, options)(axios, basePath);
        },
    };
};

/**
 * StaticHostingApi - object-oriented interface
 * @export
 * @class StaticHostingApi
 * @extends {BaseAPI}
 */
export class StaticHostingApi extends BaseAPI {
    /**
     * Returns static content in the app folder directly under the work folder
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticHostingApi
     */
    public getAppByPath(path: string, options?: any) {
        return StaticHostingApiFp(this.configuration).getAppByPath(path, options)(this.axios, this.basePath);
    }

}


