// tslint:disable
/**
 * SeikaCenter HTTP API
 * SeikaCenter HTTP API
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Avator,
    AvatorFromJSON,
    AvatorToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    Message,
    MessageFromJSON,
    MessageToJSON,
} from '../models';

export interface GetAvator2ByCidRequest {
    cid: number;
}

export interface GetAvator2CurrentByCidRequest {
    cid: number;
}

/**
 * no description
 */
export class AvatorApi extends runtime.BaseAPI {

    /**
     * Return list of available avators
     */
    async getAvator2Raw(): Promise<runtime.ApiResponse<Array<Avator>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/AVATOR2`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvatorFromJSON));
    }

    /**
     * Return list of available avators
     */
    async getAvator2(): Promise<Array<Avator>> {
        const response = await this.getAvator2Raw();
        return await response.value();
    }

    /**
     * Return parameter list of avatar indicated by cid
     */
    async getAvator2ByCidRaw(requestParameters: GetAvator2ByCidRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getAvator2ByCid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/AVATOR2/{cid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Return parameter list of avatar indicated by cid
     */
    async getAvator2ByCid(requestParameters: GetAvator2ByCidRequest): Promise<InlineResponse200> {
        const response = await this.getAvator2ByCidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Return current parameter list of avatar indicated by cid
     */
    async getAvator2CurrentByCidRaw(requestParameters: GetAvator2CurrentByCidRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling getAvator2CurrentByCid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/AVATOR2/{cid}/current`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Return current parameter list of avatar indicated by cid
     */
    async getAvator2CurrentByCid(requestParameters: GetAvator2CurrentByCidRequest): Promise<InlineResponse200> {
        const response = await this.getAvator2CurrentByCidRaw(requestParameters);
        return await response.value();
    }

}
