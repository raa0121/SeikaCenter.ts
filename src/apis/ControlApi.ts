// tslint:disable
/**
 * SeikaCenter HTTP API
 * SeikaCenter HTTP API
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    Message,
    MessageFromJSON,
    MessageToJSON,
    ParamStruct,
    ParamStructFromJSON,
    ParamStructToJSON,
} from '../models';

export interface PostPlay2ByCidRequest {
    cid: number;
    paramStruct?: ParamStruct;
}

export interface PostSave2ByCidRequest {
    cid: number;
    paramStruct?: ParamStruct;
}

export interface PostSave2ByCidAndSampleRateRequest {
    cid: number;
    sampleRate: number;
    paramStruct?: ParamStruct;
}

/**
 * no description
 */
export class ControlApi extends runtime.BaseAPI {

    /**
     * Execute voice synthesis for the avatar specified by cid
     */
    async postPlay2ByCidRaw(requestParameters: PostPlay2ByCidRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling postPlay2ByCid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'applcation/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/PLAY2/{cid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParamStructToJSON(requestParameters.paramStruct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Execute voice synthesis for the avatar specified by cid
     */
    async postPlay2ByCid(requestParameters: PostPlay2ByCidRequest): Promise<InlineResponse2001> {
        const response = await this.postPlay2ByCidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Receive audio data from the avatar specified by cid
     */
    async postSave2ByCidRaw(requestParameters: PostSave2ByCidRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling postSave2ByCid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'applcation/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/SAVE2/{cid}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParamStructToJSON(requestParameters.paramStruct),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Receive audio data from the avatar specified by cid
     */
    async postSave2ByCid(requestParameters: PostSave2ByCidRequest): Promise<Blob> {
        const response = await this.postSave2ByCidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Receive audio data from the avatar specified by cid
     */
    async postSave2ByCidAndSampleRateRaw(requestParameters: PostSave2ByCidAndSampleRateRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError('cid','Required parameter requestParameters.cid was null or undefined when calling postSave2ByCidAndSampleRate.');
        }

        if (requestParameters.sampleRate === null || requestParameters.sampleRate === undefined) {
            throw new runtime.RequiredError('sampleRate','Required parameter requestParameters.sampleRate was null or undefined when calling postSave2ByCidAndSampleRate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'applcation/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/SAVE2/{cid}/{sampleRate}`.replace(`{${"cid"}}`, encodeURIComponent(String(requestParameters.cid))).replace(`{${"sampleRate"}}`, encodeURIComponent(String(requestParameters.sampleRate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParamStructToJSON(requestParameters.paramStruct),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Receive audio data from the avatar specified by cid
     */
    async postSave2ByCidAndSampleRate(requestParameters: PostSave2ByCidAndSampleRateRequest): Promise<Blob> {
        const response = await this.postSave2ByCidAndSampleRateRaw(requestParameters);
        return await response.value();
    }

}
